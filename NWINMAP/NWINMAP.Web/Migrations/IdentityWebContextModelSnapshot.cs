// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NWINMAP.Web.Data;

namespace NWINMAP.Web.Migrations
{
    [DbContext(typeof(IdentityWebContext))]
    partial class IdentityWebContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "systemadministrator",
                            ConcurrencyStamp = "e30fe687-debd-4159-aa76-da3e6013e065",
                            Name = "SystemAdministrator",
                            NormalizedName = "SYSTEMADMINISTRATOR"
                        },
                        new
                        {
                            Id = "administrator",
                            ConcurrencyStamp = "f921b063-e23c-4c5e-a21f-e6882b7314b2",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "systemadministrator1",
                            RoleId = "systemadministrator"
                        },
                        new
                        {
                            UserId = "systemadministrator2",
                            RoleId = "systemadministrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NWINMAP.Web.Areas.Identity.Data.App.Barangay", b =>
                {
                    b.Property<string>("BarangayId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BarangayId");

                    b.ToTable("Barangay");

                    b.HasData(
                        new
                        {
                            BarangayId = "Barangay1",
                            Description = "Barangay Number 1",
                            Latitude = 13.842046,
                            Longitude = 120.943854,
                            Name = "Barangay #1"
                        },
                        new
                        {
                            BarangayId = "Barangay2",
                            Description = "Barangay Number 2",
                            Latitude = 13.842046,
                            Longitude = 120.943854,
                            Name = "Barangay #2"
                        },
                        new
                        {
                            BarangayId = "Barangay3",
                            Description = "Barangay Number 3",
                            Latitude = 13.842046,
                            Longitude = 120.943854,
                            Name = "Barangay #3"
                        },
                        new
                        {
                            BarangayId = "Barangay4",
                            Description = "Barangay Number 4",
                            Latitude = 13.842046,
                            Longitude = 120.943854,
                            Name = "Barangay #4"
                        },
                        new
                        {
                            BarangayId = "Barangay5",
                            Description = "Barangay Number 5",
                            Latitude = 13.842046,
                            Longitude = 120.943854,
                            Name = "Barangay #5"
                        });
                });

            modelBuilder.Entity("NWINMAP.Web.Areas.Identity.Data.App.BarangayUserRole", b =>
                {
                    b.Property<string>("BarangayId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("BarangayId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("BarangayUserRole");
                });

            modelBuilder.Entity("NWINMAP.Web.Areas.Identity.Data.App.Item", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BarangayId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId");

                    b.HasIndex("BarangayId");

                    b.HasIndex("UserId");

                    b.ToTable("Item");

                    b.HasData(
                        new
                        {
                            ItemId = "Barangay1Item1",
                            Address = "Address 1",
                            BarangayId = "Barangay1",
                            ConcurrencyStamp = "222721fb-8202-4aff-8875-ab7ec4215d44",
                            Description = "Barangay Number 1 Item Number 1",
                            ItemStatus = -1,
                            ItemType = 1,
                            Latitude = 13.842146,
                            Longitude = 120.92385400000001,
                            Name = "Barangay #1 Item #1",
                            UserId = "systemadministrator1"
                        },
                        new
                        {
                            ItemId = "Barangay1Item2",
                            Address = "Address 2",
                            BarangayId = "Barangay1",
                            ConcurrencyStamp = "c24c79ac-c9fd-40b8-8511-22322f48ac88",
                            Description = "Barangay Number 1 Item Number 2",
                            ItemStatus = 1,
                            ItemType = 2,
                            Latitude = 13.812346,
                            Longitude = 120.943854,
                            Name = "Barangay #1 Item #2",
                            UserId = "systemadministrator1"
                        },
                        new
                        {
                            ItemId = "Barangay1Item3",
                            Address = "Address 3",
                            BarangayId = "Barangay1",
                            ConcurrencyStamp = "3f44c226-a938-4fed-ab10-6f7e273376c1",
                            Description = "Barangay Number 1 Item Number 3",
                            ItemStatus = 0,
                            ItemType = 1,
                            Latitude = 13.862546,
                            Longitude = 120.943854,
                            Name = "Barangay #1 Item #3",
                            UserId = "systemadministrator2"
                        },
                        new
                        {
                            ItemId = "Barangay2Item4",
                            Address = "Address 4",
                            BarangayId = "Barangay2",
                            ConcurrencyStamp = "b293a45a-4698-4771-b2c9-7edfdf9d9bd1",
                            Description = "Barangay Number 2 Item Number 4",
                            ItemStatus = 1,
                            ItemType = 1,
                            Latitude = 13.862546,
                            Longitude = 120.963854,
                            Name = "Barangay #2 Item #4",
                            UserId = "systemadministrator2"
                        });
                });

            modelBuilder.Entity("NWINMAP.Web.Areas.Identity.Data.IdentityWebUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "systemadministrator1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7af7285e-ba87-4f2b-b729-14e5b74bb8a1",
                            Email = "systemadministrator1@web.com",
                            EmailConfirmed = true,
                            FirstName = "SysAdmin1 FirstName",
                            LastName = "SysAdmin1 LastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSTEMADMINISTRATOR1@WEB.COM",
                            NormalizedUserName = "SYSTEMADMINISTRATOR1@WEB.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKGIieH17t5bYXa5tUfxRwN9UIEwApTKbQBRaUtIHplIUG2OfYxvBS8uvKy5E2Stsg==",
                            PhoneNumber = "09876543212",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6SADCY3NMMLOHA2S26ZJCEWGHWSQUYRM",
                            TwoFactorEnabled = false,
                            UserName = "systemadministrator1@web.com"
                        },
                        new
                        {
                            Id = "systemadministrator2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7af7285e-ba87-4f2b-b729-14e5b74bb8a1",
                            Email = "systemadministrator2@web.com",
                            EmailConfirmed = true,
                            FirstName = "SysAdmin2 FirstName",
                            LastName = "SysAdmin2 LastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSTEMADMINISTRATOR2@WEB.COM",
                            NormalizedUserName = "SYSTEMADMINISTRATOR2@WEB.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKGIieH17t5bYXa5tUfxRwN9UIEwApTKbQBRaUtIHplIUG2OfYxvBS8uvKy5E2Stsg==",
                            PhoneNumber = "09876543212",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6SADCY3NMMLOHA2S26ZJCEWGHWSQUYRM",
                            TwoFactorEnabled = false,
                            UserName = "systemadministrator2@web.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NWINMAP.Web.Areas.Identity.Data.IdentityWebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NWINMAP.Web.Areas.Identity.Data.IdentityWebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NWINMAP.Web.Areas.Identity.Data.IdentityWebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NWINMAP.Web.Areas.Identity.Data.IdentityWebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NWINMAP.Web.Areas.Identity.Data.App.BarangayUserRole", b =>
                {
                    b.HasOne("NWINMAP.Web.Areas.Identity.Data.App.Barangay", "Barangay")
                        .WithMany("UserRoles")
                        .HasForeignKey("BarangayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NWINMAP.Web.Areas.Identity.Data.IdentityWebUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NWINMAP.Web.Areas.Identity.Data.App.Item", b =>
                {
                    b.HasOne("NWINMAP.Web.Areas.Identity.Data.App.Barangay", "Barangay")
                        .WithMany("Items")
                        .HasForeignKey("BarangayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NWINMAP.Web.Areas.Identity.Data.IdentityWebUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
